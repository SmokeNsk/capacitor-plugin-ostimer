{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAI5C,MAAM,OAAO,UAAW,SAAQ,SAAS;IAAzC;;QACE,aAAQ,GAAG,CAAC,CAAC;QAOb,oEAAoE;QACpE,kCAAkC;QAClC,oBAAoB;QACpB,IAAI;IACN,CAAC;IATC,IAAI,CAAC,QAAyB;QAC5B,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACxB,IAAI,CAAC,GAAG,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;QAC9D,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;IACnD,CAAC;CAKF","sourcesContent":["import { WebPlugin } from '@capacitor/core';\r\n\r\nimport type { CallbackID, OsTimerCallback, OsTimerPlugin } from './definitions';\r\n\r\nexport class OsTimerWeb extends WebPlugin implements OsTimerPlugin {\r\n  timerCnt = 0;\r\n  tmr: string | number | NodeJS.Timeout | undefined;\r\n  tick(callback: OsTimerCallback): Promise<CallbackID> {\r\n    clearInterval(this.tmr);\r\n    this.tmr = setInterval(() => callback(this.timerCnt++), 1000);\r\n    return Promise.resolve(this.timerCnt.toString());\r\n  }\r\n  // async tick(options: OsTimerOptions): Promise<{ value: number }> {\r\n  //   console.log('ECHO', options);\r\n  //   return options;\r\n  // }\r\n}\r\n"]}